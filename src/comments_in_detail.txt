// we will start with the class component 
// react already has Component which has some built in features to support class components
//Component has render menthod which hosts the whole jsx 
// what we want to render is what is explicitly given in render method 
// through state concept , we can use javascript variables insid eof HTML , change the html according to the behaviour
// we can add event handlers and modfiy html using js
// to get the monsters information we will make a API call 
// decide : where to place the returned information , how to get the info, from where we should call API
// where : monsters empty array , how : by fetch API call , from where : componentDidMount()
// componentDidMount method is a life cycle method, which executes as soon as the page loads
// the data in componentDidount is made available to DOM or page as soon as it loads
// class components require : mounting, lifecycle methods , contructors initialisation , rendering and unmounting
// functional components do not need all these , they need props | pure impure functions , sideefftcs replicate the class component behaviour
// useEffects show the behaviour of side effects , they take 2 arguments 
// 1. callback function ( the action to be performed) 2. (what determines the change)
// example,to avoid creating filtered monsters again and again , we can place it in hook and call it either when monsters array changes or search String changes
//  